// ZMemory library by Zelaven, but BCS-ified

strict namespace ZMemory {

world raw 160:zm[];
bool memoryInitialized = false; // allocated memory must reset per-map

typedef int ptrT;

enum
{
	nullptr = 0
};

private enum
{
	malloc_allocated,
	malloc_size,
	malloc_next_header,
	malloc_prev_header,
	malloc_num_header_properties
};

private enum
{
	p_malloc_first_header_location
};

ptrT malloc (int size)
{
	return ACS_NamedExecuteWithResult("TDB_Malloc", size);
}

// Heavy function, so we're going to make it a script to not have to worry about hitting the runaway limit.
Script "TDB_Malloc" (int size)
{
	//Do the setup on the first run of this function.
	if(!memoryInitialized) //Default values for module values is 0, so this is true.
	{
		memoryInitialized = true;
		zm[p_malloc_first_header_location+malloc_allocated] = false;
		zm[p_malloc_first_header_location+malloc_size] = -1; //"infinite"
		zm[p_malloc_first_header_location+malloc_next_header] = nullptr; //nullptr
		zm[p_malloc_first_header_location+malloc_prev_header] = nullptr; //nullptr
	}

	ptrT p_previous_header = nullptr;
	ptrT p_current_header = p_malloc_first_header_location;
	ptrT p_retval = nullptr;

	while(!p_retval)
	{
		int memalloced = zm[p_current_header+malloc_allocated];
		int memsize = zm[p_current_header+malloc_size];

		if(memsize == -1)
		{
			zm[p_current_header+malloc_allocated] = true;
			zm[p_current_header+malloc_size] = size;
			zm[p_current_header+malloc_next_header] = p_current_header+malloc_num_header_properties+size; //New EOL
			zm[p_current_header+malloc_prev_header] = p_previous_header;

			//Retrieve the return value while we are at the allocated space.
			p_retval = p_current_header+malloc_num_header_properties;

			//Remember to initialize the new end list node.
			p_previous_header = p_current_header; //This is the header previous to the EOL.
			p_current_header = zm[p_current_header+malloc_next_header];
			//Set the tail node constants.
			zm[p_current_header+malloc_allocated] = false;
			zm[p_current_header+malloc_size] = -1;
			zm[p_current_header+malloc_next_header] = nullptr;
			zm[p_current_header+malloc_prev_header] = p_previous_header;
		}
		else if(memsize >= size && !memalloced)  //There is room here AND it isn't in use,
		{
			zm[p_current_header+malloc_allocated] = true;
			//The size isn't modified because we are re-using an existing space.
			// It would be a good idea to check just how large this space is and act accordingly rather
			//  than using a 500 indexes large space for a 4 indexes large object.
			// Objects allocated in a doom mod probably won't be outside the 1-16 indexes range so it
			//  should still be fine for most applications.
			//The next header isn't changed either for the same reason.

			if(memsize >= (size+malloc_num_header_properties+5)) //Assume that 5 is the smallest useful allocation size.
			{
				int p_split_newheader = p_current_header+malloc_num_header_properties+size; //Just to the end of the allocation.
				zm[p_split_newheader+malloc_allocated] = false;
				zm[p_split_newheader+malloc_size] = zm[p_current_header+malloc_size]-malloc_num_header_properties-size;
				zm[p_split_newheader+malloc_next_header] = zm[p_current_header+malloc_next_header];
				zm[p_split_newheader+malloc_prev_header] = p_current_header;
				zm[p_current_header+malloc_next_header] = p_split_newheader; //The header whose block was split should have its next pointer set to its other half.
				zm[p_current_header+malloc_size] = size; //Set the size of the allocation to reflect the split.
			}

			//Retrieve the return value while we are at the allocated space.
			p_retval = p_current_header+malloc_num_header_properties;
		}
		else
		{
			//The observed node isn't useful for allocating the request. Go to the next node.
			p_previous_header = p_current_header;
			p_current_header = zm[p_current_header+malloc_next_header];
		}
	}

	SetResultValue(p_retval);
}

void free (ptrT p_ptr)
{
	if(!p_ptr)
		return;

	ptrT p_header = p_ptr - malloc_num_header_properties;

	zm[p_header+malloc_allocated] = false;

	ptrT p_next = zm[p_header+malloc_next_header];
	ptrT p_prev = zm[p_header+malloc_prev_header];

	//Below is the merging of free blocks.
	//It merges to the left (lower indexes) first becaue the right (larger
	// indexes) has a special case. (the end of the list)

	//the previous block is unused. Merge.
	if( (!p_prev) //This doesn't make sense if the previous block doesn't exist.
	&& (!zm[p_prev+malloc_allocated]))
	{
		zm[p_prev+malloc_size] += zm[p_header+malloc_size] + malloc_num_header_properties;
		zm[p_prev+malloc_next_header] = p_next; //The prev header needs to know the new next.
		zm[p_next+malloc_prev_header] = p_prev; //The next header needs to know the new prev.

		//Now the two blocks are the same block. requires new initializations of the
		// variables for the other check to function correctly.
		//The header is the result of the merge, and the prev is the one before it.
		p_header = p_prev;
		p_prev = zm[p_header+malloc_prev_header];
	}
  
	//The next block is unused. Merge.
	//Note that p_next will never be a nullptr with correct usage.
	if(!zm[p_next+malloc_allocated])
	{
		if(zm[p_next+malloc_size] == -1) //EOL
		{
		  zm[p_header+malloc_size] = -1;
		  zm[p_header+malloc_next_header] = nullptr;
		}
		else
		{
		  ptrT p_next_next = zm[p_next+malloc_next_header];
		  zm[p_header+malloc_size] += zm[p_next+malloc_size] + malloc_num_header_properties;
		  zm[p_header+malloc_next_header] = p_next_next; //The header on the other side of the next header needs to know its new prev.
		  zm[p_next_next+malloc_prev_header] = p_header; //This header needs to know its new next.
		}
	}
}

#define MEMSET_IMPL for(int i = buf + n; i > buf; i--) zm[i] = n;

void memset (ptrT buf, int v, int n)
{
	if(n > 64)
	{
		ACS_NamedExecuteWithResult("TDB_Memset", buf, v, n);
		return;
	}

	MEMSET_IMPL;
}

Script "TDB_Memset" (int buf, int v, int n)
{
	MEMSET_IMPL;
}

#define MEMCPY_IMPL for(int i = 0; i < c; i++) zm[dst+i] = zm[src+i]

// BCS reserves the memcpy keyword for it's memcpy intrinsic
void zmemcpy (ptrT dst, ptrT src, int c)
{
	if(c > 16)
	{
		ACS_NamedExecuteWithResult("TDB_Memcpy", dst, src, c);
		return;
	}

	MEMCPY_IMPL;
}

Script "TDB_Memcpy" (int dst, int src, int c)
{
	MEMCPY_IMPL;
}

ptrT realloc (ptrT ptr, int newSize)
{
	if(!newSize)
	{
		free(ptr);
		return nullptr;
	}
	else if(!ptr)
	{
		return ACS_NamedExecuteWithResult("TDB_Malloc", newSize);
	}

	int oldSize;
	ptrT oldHdr, newPtr = ACS_NamedExecuteWithResult("TDB_Malloc", newSize);

	zmemcpy(newPtr, ptr, zm[(ptr - malloc_num_header_properties) + malloc_size]);
	free(ptr);

	return newPtr;
}

ptrT calloc (int n, int s)
{
	int size = n * s;
	ptrT ptr = ACS_NamedExecuteWithResult("TDB_Malloc", size);

	memset(ptr, 0, size);
	return ptr;
}

// single-tic allocation
Script "TDB_Alloca_Handle" (int ptr)
{
	Delay(1);
	free(ptr);
}

ptrT alloca (int size)
{
	ptrT ptr = ACS_NamedExecuteWithResult("TDB_Malloc", size);
	ACS_NamedExecuteWithResult("TDB_Alloca_Handle", ptr);
	return ptr;
}

//These are for debugging
Script "TDB_Memory_Write" (int index, int value)
{
	zm[index] = value;
}

Script "TDB_Memory_Read" (int index)
{
	log(d:zm[index]);
}

Script "TDB_Memory_Read_Str" (int index)
{
	log(s:zm[index]);
}

Script "TDB_Read_test" (int index)
{
	log(s:TDB_TargetCallbacks_Get(index));
}

Script "TDB_Memory_Print"
{
	ptrT p_current_header = p_malloc_first_header_location;

	do
	{
		log(s:  "Header location: ", d:p_current_header,
		    s:"\n Allocated flag: ", d:zm[p_current_header+malloc_allocated],
		    s:"\n Allocation size: ", d:zm[p_current_header+malloc_size],
		    s:"\n Prev header pointer: ", d:zm[p_current_header+malloc_prev_header],
		    s:"\n Next header pointer: ", d:zm[p_current_header+malloc_next_header],
		    s:"\n");

		p_current_header = zm[p_current_header+malloc_next_header];
	} while(p_current_header != nullptr);
}

}
